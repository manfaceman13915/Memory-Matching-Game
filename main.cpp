#include <iostream>
#include <string>
#include <sstream>
#include <cstdlib>
#include <ctime>
#include <windows.h> // for sleep
using namespace std;

char board[4][4]; // ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏à‡∏£‡∏¥‡∏á (‡∏ã‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà)
char display[4][4]; // ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≠‡∏á‡∏î‡∏π (‡∏°‡∏µ * ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏Å‡∏©‡∏£)
bool matched[4][4]; // ‡∏à‡∏≥‡∏ß‡πà‡∏≤‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á

void initBoard() {
    char letters[] = { 'A','A','B','B','C','C','D','D',
    'E','E','F','F','G','G','H','H' };

    srand(static_cast<unsigned int>(time(0)));
    for (int i = 0; i < 16; i++) {
        int r = rand() % 16;
        swap(letters[i], letters[r]);
    }

    int k = 0;
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            board[i][j] = letters[k++];
            display[i][j] = '*';
            matched[i][j] = false;
        }
    }
}

void drawBoard() {
    cout << "   0 1 2 3\n";
    for (int i = 0; i < 4; i++) {
        cout << i << "  ";
        for (int j = 0; j < 4; j++) {
            cout << display[i][j] << " ";
        }
        cout << endl;
    }
}

void getChoice(int& row, int& col) {
    string input;
    while (true) {
        cout << "Enter the row and column (eg 1 2):";
        getline(cin, input); // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°

        stringstream ss(input); // ‡∏™‡∏£‡πâ‡∏≤‡∏á stream ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥
        if ((ss >> row >> col) && ss.eof()) { // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏¢‡∏Å‡πÑ‡∏î‡πâ 2 ‡∏Ñ‡πà‡∏≤ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏¢‡∏∞‡πÄ‡∏´‡∏•‡∏∑‡∏≠
            if (row >= 0 && row < 4 && col >= 0 && col < 4 && !matched[row][col]) {
                break;
            }
            else {
                cout << "‚ùó This channel is invalid or exceeds its limit.\n";
            }
        }
        else {
            cout << "‚ùó Invalid data format. Please enter only two numbers, e.g. : 1 2\n";
        }
    }
}

int main() {
    int matchedPairs = 0; // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ
    int turns = 0;        // ‚úÖ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏±‡∏ö‡∏£‡∏≠‡∏ö

    initBoard();

    while (matchedPairs < 8) {
        drawBoard();

        int r1, c1, r2, c2;
        cout << "Pick first card:\n";
        getChoice(r1, c1);
        display[r1][c1] = board[r1][c1]; // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á

        drawBoard();

        cout << "Pick second card:\n";
        getChoice(r2, c2);
        display[r2][c2] = board[r2][c2]; // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á

        drawBoard(); // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô 2 ‡∏ä‡πà‡∏≠‡∏á

        turns++; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏£‡∏ö 2 ‡πÉ‡∏ö

        if (board[r1][c1] == board[r2][c2] && !(r1 == r2 && c1 == c2)) {
            cout << "‚úÖ Matched!\n";
            matched[r1][c1] = matched[r2][c2] = true;
            matchedPairs++; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        }
        else {
            cout << "‚ùå Not matched...\n";
            Sleep(1500); // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 1500 ‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ = 1.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            display[r1][c1] = display[r2][c2] = '*';
            display[r2][c2] = '*';
        }
        Sleep(500); // ‡πÄ‡∏ß‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
    }

    // GAME END
    cout << "---------------------------------------------\n";
    cout << "üéâ You matched all pairs successfully!\n";
    cout << "üìå Total turns used: " << turns << endl; // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö
    system("pause");

    return 0;
}
